#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK

import os
import os.path
import sys
import subprocess
import argparse
import string
import logging
import re
from icolor import cformat
import traceback
import base64
import websocket
import json
import argcomplete
import socket
import requests
import signal
import errno

# --- Set some variables

logging.getLogger("requests").setLevel(logging.WARNING)
logging.getLogger("urllib3").setLevel(logging.WARNING)

xpmdir = os.path.dirname(os.path.dirname(os.path.realpath(os.path.abspath(__file__))))

version = "0.0.1-SNAPSHOT"
jarname = "experimaestro-%s.jar" % version

def mkdir_p(path):
    """Similar to ``mkdir -p path``.
    """
    if not path:
        return
    try:
        os.makedirs(path)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise e

class JsonRPCMethod:
    def __init__(self, url, name, jsonid):
        self.url = url
        self.name = name
        self.jsonid = jsonid

    def __call__(self, args):
        payload = {
            "method": self.name,
            "params": args,
            "jsonrpc": "2.0",
            "id": self.jsonid,
        }
        headers = {'content-type': 'application/json'}

        response = requests.post(self.url, data=json.dumps(payload), headers=headers).json()
        assert response["jsonrpc"] == "2.0"
        assert response["id"] == str(self.jsonid)

        error = response.get("error", None)
        if not error is None:
            raise RuntimeError("Error while calling method %s: [%d] %s" % (self.name, error["code"], error["message"]))
        return response["result"]

class JsonRPCClient:
    def __init__(self, url):
        self.url = url
        self.jsonid = 0

    def __getattr__(self, name):
        self.jsonid += 1
        return JsonRPCMethod(self.url, name, self.jsonid)


# --- Check paths
def jarpaths():
    """Returns the different paths where the JAR file can be located"""
    yield os.path.join(xpmdir, jarname)
    yield os.path.join(xpmdir, "target", "experimaestro-%s-bin" % version, jarname)


def start_jar(args, jarargs):
    import daemonlib
    import time

    conf = Configuration(args)
    os.environ["EXPERIMAESTRO_CONFIG_FILE"] = conf.configfile

    workdir = conf.config.sub("server")["database"]
    mkdir_p(workdir)

    # Check what if we start using maven
    mvnFile = os.path.join(xpmdir, "pom.xml")
    if not os.path.exists(mvnFile):
        mvnFile = None

    if args.maven or mvnFile is not None:
        logging.info("Starting with maven")
        command = ["mvn", "exec:java", "-Dexec.mainClass=bpiwowar.experiments.Run"]
        jarargs = [ "server" ]
        if mvnFile is not None:
            command.append("--file")
            command.append(mvnFile)
        jarargs = [arg for arg in jarargs]
        command.append("-Dexec.args=%s" % " ".join(jarargs))

    else:
        jarpath = None
        for f in jarpaths():
            print("Trying %s" % f)
            if os.path.isfile(f):
                jarpath = f
                break

        if jarpath is None:
            raise RuntimeError("Could not find experimaestro jar file")
        command = ["java", "-Xmx1g", "-jar", jarpath] + jarargs

    def start_server(logger):
        logger.info("Starting experimaestro server...")
        logger.debug("start command: {!r}".format(command))
        with open(os.path.join(workdir, "server.out"), "w") as stdout, \
             open(os.path.join(workdir, "server.err"), "w") as stderr:
            return subprocess.call(command,
                                   stdout=stdout,
                                   stderr=stderr,
                                   # FIXME(Nicolas Despres): Same remarks
                                   #  than for daemonlib.daemonize().
                                   close_fds=False)

    def wait_server(pid):
        logging.info("Waiting for server to start (PID=%s)...", pid)
        logging.debug("this is a debug message")
        json_server = conf.getJsonServer()
        logging.debug("info after getting json server")
        TIMEOUT = args.timeout # sec
        if TIMEOUT <= 0:
            raise ValueError("invalid timeout value: {}".format(TIMEOUT))
        started_at = time.time()
        nattempt = 0
        last_error = None
        while True:
            try:
                nattempt += 1
                logging.debug("%d attempt to ping server...", nattempt)
                rc = raw_ping(json_server)
            except requests.exceptions.ConnectionError as e:
                last_error = e
            else:
                if rc:
                    logging.info("Server started...")
                    break
            if time.time() - started_at >= TIMEOUT: # sec
                logging.fatal("Timeout after %ds pinging the server",
                              TIMEOUT)
                if last_error is not None:
                    logging.fatal("Last error was: %s", last_error)
                logging.debug("Send SIGTERM to process group %d", pid)
                os.kill(-pid, signal.SIGTERM)
                break
            time.sleep(1)
        return 0

    daemonlib.daemonize(start_server, wait_server,
        daemon_cwd=workdir,
        pid_file=os.path.join(workdir, "server.pid"),
        log_level=logging.DEBUG if args.debug else logging.INFO,
        # FIXME(Nicolas Despres): Turn close_fds to True:
        #   In theory a gentle daemon closed all its opened fds before to start
        #   (i.e. the copy of fds inherited from its parent). However, in
        #   our case this leads to un-deterministic error such as the client
        #   (i.e. run-js) complaining about the socket being already closed.
        #   We can see in the daemon log that the daemon processs
        #   (i.e. our child) closes some fds which are probably some socket
        #   opened by the JsonServer or the like. It would require further
        #   debugging to diagnostic that. In theory, closing in a child
        #   process a socket created in the parent is not a problem, but in
        #   our case things seems to work better when we do not close them.
        close_fds=False)

class Properties:
    def __init__(self, map=[None, {}]):
        self.map = map

    def __len__(self):
        return len(self.map[1])

    def __getitem__(self, name):
        v = self.sub(name, None)
        if v is None:
            raise KeyError("No key '%s' in properties" % name)
        return v.map[0]

    def keys(self):
        return self.map[1].keys()

    def get(self, name, default=None):
        v = self.sub(name, None)
        if v is None:
            return None
        return v.map[0]

    def __str__(self):
        return "Properties (%s)" % self.map.__str__()

    def __iter__(self):
        for k, v in self.map[1].items():
            yield k, Properties(v)

    def sub(self, name, default=None):
        c = self.map
        for k in name.split("."):
            if not k in c[1]:
                return default
            else:
                c = c[1][k]
        return Properties(c)

    def set(self, name, value):
        c = self.map
        for k in name.split("."):
            if not k in c[1]:
                c[1][k] = [None, {}]
            c = c[1][k]

        c[0] = value


def getProperties(filename):
    """Get a dictionnary from a property file
   """
    with open(filename, "rU") as propFile:

        re_comment = re.compile(r"""[#;].*""")
        re_section = re.compile(r"""^\[(\w+)\]$""")
        re_value = re.compile(r"""([\w.]+)\s*=\s*(\S*)\s*""")

        # Set some default values
        props = Properties()
        section = ""

        # Read the properties
        for propLine in propFile:
            propDef = propLine.strip()
            if len(propDef) == 0 or re_comment.match(propDef):
                continue

            m = re_section.match(propDef)
            if m is not None:
                section = m.group(1) + "."
                continue

            m = re_value.match(propDef)
            if m is not None:
                props.set(section + m.group(1), m.group(2))
                continue

            raise RuntimeError("Could not read line [%s]" % propDef)

        return props


class Configuration():
    def __init__(self, args):
        """Get the configuration from command line and configuration file"""

        # Get the configuration
        self.configfile = os.path.expanduser(args.config)

        # Initialise the server
        self.config = getProperties(self.configfile)

        clients = self.config.sub("client", None)
        if clients is None:
            raise RuntimeError("No client section in configuration file")

        if args.server is None:
            if len(clients) > 1:
                args.server = None
                for name, client in clients:
                    if client.get("default", False) == "true":
                        if args.server is None:
                            args.server = name
                            logging.debug("Default server is %s" % name)
                        else:
                            raise RuntimeError("More than one client defined as default in configuration file")
                if args.server is None:
                    raise RuntimeError("More than one client [%d] in configuration file (%s): use the --server option or make one client the default"
                                    % (len(clients), ",".join(clients.keys())))
            else:
                for name, client in clients:
                    args.server = name

        self.client = clients.sub(args.server)
        self.remote = self.client.get("remote", False) in ["true", "True", "1"]


    def getJsonServer(self):
        url = "%s/json-rpc" % self.client["url"]
        return JsonRPCClient(url)

    def getWebSocketServer(self):
        re_url = re.compile("""http(s)?://(?:([^:@]+):([^@]+)@)?(.+)$""")
        m = re_url.match(self.client["url"])
        if not m:
            raise "Client URL is not valid"

        scheme = "ws"
        if m.group(1):
            scheme = "wss"
        url = "%s://%s/web-socket" % (scheme, m.group(4))
        header = []
        if m.group(2) and m.group(3):
            auth = base64.b64encode(bytes("%s:%s" % (m.group(2), m.group(3)), "ascii")).decode("ascii")
            header = ["Authorization: Basic %s" % auth]


        return websocket.create_connection(url, header=header)


# --- Server

def raw_ping(json_server):
    return json_server.ping({}) == "pong"

def ping(json_server):
    try:
        return raw_ping(json_server)
    except socket.error as e:
        return False

def command_start_server(args):
    json_server = Configuration(args).getJsonServer()
    if ping(json_server):
        logging.info("Server already started")
        return 0

    start_jar(args, ["server"])


def command_stop_server(args):
    server = Configuration(args).getJsonServer()
    server.shutdown({})


def command_run_python(args):
    conf = Configuration(args)
    client = conf.getWebSocketServer()

    # Get the command line
    files = []

    if args.pre:
        files.append(["<pre>", args.pre])

    for filename in args.files:
        filepath = os.path.abspath(filename)
        if not conf.remote:
            files.append([filepath, None])
        else:
            files.append([filepath, open(filepath).read()])

    if args.post:
        files.append(["<post>", args.post])

    logging.debug("Running python scripts %s" % [s[0] for s in files])

    params = {"files": files, "environment": dict(os.environ)}

    run_server_command(client, "run-python", params)



def command_run_js(args):
    conf = Configuration(args)
    client = conf.getWebSocketServer()

    # Get the command line
    files = []

    if args.pre:
        files.append(["<pre>", args.pre])

    for filename in args.files:
        filepath = os.path.abspath(filename)
        if not conf.remote:
            files.append([filepath, None])
        else:
            files.append([filepath, open(filepath).read()])

    if args.post:
        files.append(["<post>", args.post])

    logging.debug("Running JS scripts %s" % [s[0] for s in files])

    params = {"files": files, "environment": dict(os.environ)}
    if args.debug_port > 0:
        params["debug"] = args.debug_port

    run_server_command(client, "run-javascript", params)

# Run a command using web sockets
def run_server_command(client, command, params):
    code = 0
    msg = json.dumps({"id": 1, "method": command, "params": params})
    client.send(msg)
    while client is not None:
        message = client.recv()
        o = json.loads(message)
        if type(o) == dict:
            if o["id"]:
                if o.get("error", 0) != 0:
                    code = o["error"]["code"]
                    sys.stderr.write("%s\n" % o["error"]["message"])
                break
            else:
                result = o["result"]
                if result["stream"] == "out":
                    sys.stdout.write(result["value"])
                else:
                    sys.stdout.write(result["value"])

    sys.exit(code)

def command_update(args):
    server = Configuration(args).getJsonServer()
    print("%d updated job(s)" % server.updateJobs({
        "group": args.group,
        "recursive": args.recursive,
        "states": get_states(args.states)
    }))


def command_ls(args):
    server = Configuration(args).getJsonServer()
    response = server.listJobs({"group": args.group, "states": get_states(args.states), "recursive": args.recursive})
    for l in response:
        if args.color:
            state = l.get("state", "?").upper()
            if state == 'ERROR':
                print(cformat("#RED;%s" % l))
            elif state == 'DONE':
                print(cformat("#GREEN;%s" % l))
            elif state == 'RUNNING':
                print(cformat("#CYAN;%s" % l))
            elif state == 'ON_HOLD':
                print(cformat("#YELLOW;%s" % l))
            else:
                print(l)
        else:
            json.dump(l, sys.stdout)
            sys.stdout.write("\n")

def command_ping(args):
    r = Configuration(args).getJsonServer().ping({})
    if r == "pong":
        sys.exit(0)
    sys.exit(1)


def command_list_methods(args):
    server = Configuration(args).getJsonServer()
    for method in server.system.listMethods():
        if not method.startswith("system"):
            print("# %s" % method)
            print(server.system.methodSignature(method))
            print(server.system.methodHelp(method))
            print


def command_information(args):
    server = Configuration(args).getJsonServer()
    json.dump(server.getResourceInformation(args.resourceId[0]), sys.stdout)
    sys.stdout.write("\n")


def command_restart(args):
    server = Configuration(args).getJsonServer()
    print(server.restart({ "id": args.resourceId[0], "recursive": args.recursive, "restart-done": args.restart_done}))


def command_kill(args):
    server = Configuration(args).getJsonServer()
    n = server.kill({"jobs": args.jobid})
    print("Killed %d jobs" % n)

def command_generate_files(args):
    client = Configuration(args).getWebSocketServer()
    run_server_command(client, "generateFiles", {"jobs": args.jobid})

def command_rm(args):
    server = Configuration(args).getJsonServer()
    if len(args.jobid) == 0:
        args.jobid = [""]

    states = get_states(args.states)
    if args.group is None:
        args.group = ""

    for jobid in args.jobid:
        n = server.remove({"group": args.group, "id": jobid, "states": states, "recursive": args.recursive, "regexp": args.regexp})
        print("Removed %d resources" % n)


def command_log_level(args):
    server = Configuration(args).getJsonServer()
    server.setLogLevel({"identifier": args.id[0], "level": args.level[0]})

# --- Utility functions


def get_states(states):
    if states is not None:
        states = args.states.split(",")
    else:
        states = []
    return states


# --- Run command


# create the top-level parser
parser = argparse.ArgumentParser(description='experimaestro script.')
subparsers = parser.add_subparsers(help='Command', dest='command')
parser.set_defaults(dir=xpmdir)
parser.add_argument("--log", dest="loglevel", action="store", help="Log level",
                    choices=["debug", "info", "warn"], default="info")
parser.add_argument("--debug", dest="debug", action="store_true", help="Debug script")
parser.add_argument("--verbose", dest="verbose", action="store_true", help="Use verbose mode for XML-RPC server")
parser.add_argument("--config", dest="config", default="~/.experimaestro/settings.ini", action="store",
                    help="Experimaestro configuration file")
parser.add_argument("--server", dest="server", action="store", help="The experimaestro server to use")

p_start = subparsers.add_parser("start-server", help="Start the experimaestro server")
p_start.add_argument("--maven", dest="maven", action="store_true", help="Force starts using maven")
p_start.add_argument("--timeout", action="store", default=30, type=int, help="Timeout (in second) to ping server")

subparser = subparsers.add_parser("stop-server", help="Stop the experimaestro server")

# --- Scripting
p_run_js = subparsers.add_parser("run-js", help="Run JavaScript script in server")
p_run_python = subparsers.add_parser("run-python", help="Run Python script in server")
p_run_js.add_argument("--debug-port", dest="debug_port", default=-1, type=int, help="Port for remote JS debugging")
for p in [p_run_js, p_run_python]:
    p.add_argument("--remote", dest="remote", action="store_true", help="For the remote mode (files should be transmitted)")
    p.add_argument("--pre", dest="pre", help="Execute this javascript before the files")
    p.add_argument("--post", dest="post", help="Execute this javascript after the files")
    p.add_argument('files', nargs='*', help='')



job_specification = argparse.ArgumentParser(add_help=False)
job_specification.add_argument('--states', dest="states", help="States")
job_specification.add_argument('group', nargs='?', help="The group to list", default="")
job_specification.add_argument('--recursive', dest="recursive", action="store_true", default=False, help="Should dependent resources be included?")

subparsers.add_parser("update", help="Update jobs", parents=[job_specification])

p_ls = subparsers.add_parser("ls", help="List jobs", parents=[job_specification])
p_ls.add_argument("--color", action="store_true", default=False, help="Whether to color the output")

subparsers.add_parser("list-methods", help="List Json RPC methods")

p_restart = subparsers.add_parser("restart", help="Restart a job")
p_restart.add_argument('--recursive', dest="recursive", action="store_true", default=False, help="Should dependent resources be restarted?")
p_restart.add_argument('--restart-done', dest="restart_done", action="store_true", default=False, help="Should done jobs be restarted?")
p_restart.add_argument('resourceId', nargs=1, help='The resource URI')

p_information = subparsers.add_parser("information", help="Get information on a resource")
p_information.add_argument('resourceId', nargs=1, help='The resource URI')

p_rm = subparsers.add_parser("rm", help="Remove a resource")
p_rm.add_argument('--regexp', dest="regexp", action="store_true", default=False, help="If the provided id are regular expressions")
p_rm.add_argument('--states', dest="states", help="States")
p_rm.add_argument('--group', dest="group")
p_rm.add_argument('--recursive', dest="recursive", action="store_true", default=False, help="Should dependent resources be removed?")
p_rm.add_argument('jobid', nargs="*", help="The job ids")

p_kill = subparsers.add_parser("kill", help="Kill a job")
p_kill.add_argument('jobid', nargs="+", help="The job URIs or IDs")

p_generate_files = subparsers.add_parser("generate-files", help="Generate files")
p_generate_files.add_argument('jobid', nargs="+", help="The job URIs or IDs")


p_log_level = subparsers.add_parser("log-level", help="Set the logger level")
p_log_level.add_argument('id', nargs=1, help='The logger ID')
p_log_level.add_argument('level', nargs=1, choices=["TRACE", "DEBUG", "INFO", "WARN", "ERROR", "FATAL"], help='The level')

subparsers.add_parser("ping", help="Ping the server")

# Parse arguments
args = parser.parse_args()
argcomplete.autocomplete(args)

numeric_level = getattr(logging, args.loglevel.upper(), None)
if not isinstance(numeric_level, int):
    raise ValueError('Invalid log level: %s' % args.loglevel)
logging.basicConfig(level=logging.DEBUG if args.debug else logging.INFO)

if args.command is None:
    parser.print_help()
    sys.exit(0)

try:
    fname = "command_%s" % args.command.replace("-", "_")
    locals()[fname](args)
except Exception as e:
    print(e)
    if args.debug:
        print(traceback.format_exc())
    sys.exit(1)
